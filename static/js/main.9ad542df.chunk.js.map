{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PERCENTAGE","App","state","totalValue","comission","lines","onChange","e","_this","setState","text","lineWithoutExtraSpace","split","filter","x","map","line","col","values","valueIndex","length","Number","replace","linesWithoutExtraSpace","join","sumOfValues","reduce","acc","curr","processEntries","target","value","_this$state","this","react_default","a","createElement","style","textAlign","es","for","as","name","rows","width","border","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPAGMA,EAAa,OAqEJC,6MAzCbC,MAAQ,CACNC,WAAY,EACZC,UAAW,EACXC,MAAO,MAGTC,SAAW,SAAAC,GACTC,EAAKC,SAjCT,SAAwBC,GACtB,IAEMC,EAFQD,EAAKE,MAAM,MAAMC,OAAO,SAAAC,GAAC,MAAU,KAANA,IAEPC,IAAI,SAAAC,GAAI,OAC1CA,EAAKJ,MAAM,KAAKC,OAAO,SAAAI,GAAG,MAAY,KAARA,MAG1BC,EAASP,EAAsBI,IAAI,SAAAC,GACvC,IAAMG,EAAaH,EAAKI,OAAS,EAEjC,OAAOC,OAAOL,EAAKG,GAAYG,QAAQ,IAAK,QAGxCC,EAAyBZ,EAAsBI,IAAI,SAAAC,GAAI,OAC3DA,EAAKQ,KAAK,OAGNC,EAAcP,EAAOQ,OAAO,SAACC,EAAKC,GAAN,OAAeD,EAAMC,GAAM,GAE7D,MAAO,CACLvB,MAAOkB,EACPpB,WAAYsB,EACZrB,UAAYqB,EAAc,IAAOzB,GAWnB6B,CAAetB,EAAEuB,OAAOC,iFAG/B,IAAAC,EAC2BC,KAAK/B,MAA/BC,EADD6B,EACC7B,WAAYC,EADb4B,EACa5B,UACpB,OACE8B,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLC,UAAW,WAGbJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOC,IAAI,SAAX,uBACAN,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACEE,GAAG,WACHC,KAAK,QACLpC,SAAU2B,KAAK3B,SACfqC,KAAM,GACNN,MAAO,CACLO,MAAO,OACPC,OAAQ,sBAIdX,EAAAC,EAAAC,cAACG,EAAA,EAAD,MACAL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACG,EAAA,EAAD,eAAmBpC,EAAnB,KACA+B,EAAAC,EAAAC,cAACG,EAAA,EAAD,qBAAsBnC,EAAtB,cAnCQ0C,aClBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9ad542df.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport { Input, Paragraph, Divider, Label, Field } from \"reakit\"\n\nconst PERCENTAGE = 50\n\nfunction processEntries(text) {\n  const lines = text.split(\"\\n\").filter(x => x !== \"\")\n\n  const lineWithoutExtraSpace = lines.map(line =>\n    line.split(\" \").filter(col => col !== \"\")\n  )\n\n  const values = lineWithoutExtraSpace.map(line => {\n    const valueIndex = line.length - 2\n\n    return Number(line[valueIndex].replace(\",\", \".\"))\n  })\n\n  const linesWithoutExtraSpace = lineWithoutExtraSpace.map(line =>\n    line.join(\" \")\n  )\n\n  const sumOfValues = values.reduce((acc, curr) => acc + curr, 0)\n\n  return {\n    lines: linesWithoutExtraSpace,\n    totalValue: sumOfValues,\n    comission: (sumOfValues / 100) * PERCENTAGE\n  }\n}\nclass App extends Component {\n  state = {\n    totalValue: 0,\n    comission: 0,\n    lines: []\n  }\n\n  onChange = e => {\n    this.setState(processEntries(e.target.value))\n  }\n\n  render() {\n    const { totalValue, comission } = this.state\n    return (\n      <div\n        style={{\n          textAlign: \"center\"\n        }}\n      >\n        <Field>\n          <Label for=\"texto\">Cole o texto abaixo</Label>\n          <Input\n            as=\"textarea\"\n            name=\"texto\"\n            onChange={this.onChange}\n            rows={50}\n            style={{\n              width: \"100%\",\n              border: \"1px solid black\"\n            }}\n          />\n        </Field>\n        <Divider />\n        <div>\n          <Paragraph>Total: {totalValue} </Paragraph>\n          <Paragraph>Comiss√£o: {comission} </Paragraph>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}